<Playlist Version="1.0"><Add Test="CompilerTests.LexerTests.Record" /><Add Test="CompilerTests.ParserTests.RuntimeType" /><Add Test="CompilerTests.ParserTests.Return" /><Add Test="CompilerTests.TypeChecker.IfStatementWithBool" /><Add Test="CompilerTests.CodeGenerator.BinaryAddition" /><Add Test="CompilerTests.TypeConstraints.AndOnSmallerAnd" /><Add Test="CompilerTests.ParserTests.Float" /><Add Test="CompilerTests.ParserTests.RawType" /><Add Test="CompilerTests.ParserTests.Name" /><Add Test="CompilerTests.CodeGenerator.StringConstant" /><Add Test="CompilerTests.TypeChecker.TypeofBinaryAdd" /><Add Test="CompilerTests.TypeChecker.FunctionCallOverloadFailure" /><Add Test="CompilerTests.LexerTests.Def" /><Add Test="CompilerTests.CodeGenerator.UnaryOperatorNegation" /><Add Test="CompilerTests.LexerTests.Val" /><Add Test="CompilerTests.ParserTests.String" /><Add Test="CompilerTests.TypeChecker.TypeofBinaryIntWithBool" /><Add Test="CompilerTests.LexerTests.Var" /><Add Test="CompilerTests.TypeChecker.FunctionDefinitionInvalidReturn" /><Add Test="CompilerTests.LexerTests.For" /><Add Test="CompilerTests.TypeConstraints.AndAssignee" /><Add Test="CompilerTests.CodeGenerator.FinalizeRecord" /><Add Test="CompilerTests.CodeGenerator.BinaryOr" /><Add Test="CompilerTests.TypeChecker.BindingDeclarationPlainIntegerArray" /><Add Test="CompilerTests.ParserTests.BooleanTrue" /><Add Test="CompilerTests.TypeChecker.TypeofArrayAssignmentOutofBounds" /><Add Test="CompilerTests.TypeChecker.BindingDeclarationPlainInteger" /><Add Test="CompilerTests.TypeConstraints.EqOnLtGt" /><Add Test="CompilerTests.TypeChecker.TypeofUnary" /><Add Test="CompilerTests.CodeGenerator.For" /><Add Test="CompilerTests.ParserTests.FunctionCall" /><Add Test="CompilerTests.CodeGenerator.While" /><Add Test="CompilerTests.TypeChecker.TypeofInteger" /><Add Test="CompilerTests.TypeChecker.NewAssignment" /><Add Test="CompilerTests.TypeChecker.ProgramFailure" /><Add Test="CompilerTests.CodeGenerator.FunctionSignature" /><Add Test="CompilerTests.ParserTests.ArrayAssignment" /><Add Test="CompilerTests.CodeGenerator.ArrayIndex" /><Add Test="CompilerTests.LexerTests.ManyDigit" /><Add Test="CompilerTests.TypeChecker.BindingDeclarationPlainFloat" /><Add Test="CompilerTests.TypeConstraints.ModOnLtGtEq" /><Add Test="CompilerTests.TypeChecker.TypeofBool" /><Add Test="CompilerTests.TypeChecker.TypeofArrayIndexIncorrectArray" /><Add Test="CompilerTests.TypeConstraints.AndOnAnd" /><Add Test="CompilerTests.ParserTests.For" /><Add Test="CompilerTests.ParserTests.FunctionDefinition" /><Add Test="CompilerTests.LexerTests.AngleBrackets" /><Add Test="CompilerTests.TypeChecker.TypeofArrayAssignmentIncorrectIndex" /><Add Test="CompilerTests.TypeChecker.Record" /><Add Test="CompilerTests.TypeChecker.Assignment" /><Add Test="CompilerTests.ParserTests.IntegerLiteral" /><Add Test="CompilerTests.TypeChecker.ConstrainedInt" /><Add Test="CompilerTests.TypeConstraints.OrAsAssignee" /><Add Test="CompilerTests.TypeConstraints.Gt" /><Add Test="CompilerTests.LexerTests.SingleDigit" /><Add Test="CompilerTests.CodeGenerator.Assignment" /><Add Test="CompilerTests.TypeChecker.RecordUsageFailure" /><Add Test="CompilerTests.TypeChecker.TypeofBinaryMul" /><Add Test="CompilerTests.ParserTests.TypeName" /><Add Test="CompilerTests.TypeChecker.RecordUsage" /><Add Test="CompilerTests.CodeGenerator.UnaryOperatorNot" /><Add Test="CompilerTests.TypeChecker.AssignmentFailure" /><Add Test="CompilerTests.TypeConstraints.OrConstraint" /><Add Test="CompilerTests.TypeChecker.ComplexType" /><Add Test="CompilerTests.TypeChecker.FunctionCallFailure" /><Add Test="CompilerTests.LexerTests.String" /><Add Test="CompilerTests.CodeGenerator.Constraint" /><Add Test="CompilerTests.CodeGenerator.FunctionCall" /><Add Test="CompilerTests.ParserTests.Block" /><Add Test="CompilerTests.TypeConstraints.Mod" /><Add Test="CompilerTests.CodeGenerator.BinaryGreaterThan" /><Add Test="CompilerTests.LexerTests.RuntimeType" /><Add Test="CompilerTests.CodeGenerator.If" /><Add Test="CompilerTests.TypeChecker.IfStatementCheckConcequent" /><Add Test="CompilerTests.TypeChecker.ArrayType" /><Add Test="CompilerTests.TypeChecker.FunctionCall" /><Add Test="CompilerTests.CodeGenerator.BinaryAnd" /><Add Test="CompilerTests.TypeChecker.TypeofUnaryBool" /><Add Test="CompilerTests.TypeChecker.While" /><Add Test="CompilerTests.TypeChecker.BindingDeclarationMultiConstrainedIntegerArrayAtRuntime" /><Add Test="CompilerTests.ParserTests.ConstrainedType" /><Add Test="CompilerTests.TypeChecker.WhileInvalidCondition" /><Add Test="CompilerTests.CodeGenerator.ArrayConstant" /><Add Test="CompilerTests.TypeChecker.TypeofFloat" /><Add Test="CompilerTests.TypeChecker.FunctionDefinition" /><Add Test="CompilerTests.CodeGenerator.FunctionDefinition" /><Add Test="CompilerTests.TypeChecker.TypeofArrayAssignmentOutofLowerBounds" /><Add Test="CompilerTests.ParserTests.BindingDeclaration" /><Add Test="CompilerTests.TypeChecker.IfStatementWithoutBool" /><Add Test="CompilerTests.TypeConstraints.ComplexAnd" /><Add Test="CompilerTests.TypeChecker.TypeofArrayAssignmentIncorrectAssignment" /><Add Test="CompilerTests.CodeGenerator.BinaryMultiplication" /><Add Test="CompilerTests.TypeChecker.BooleanType" /><Add Test="CompilerTests.ParserTests.FunctionSignature" /><Add Test="CompilerTests.LexerTests.Bools" /><Add Test="CompilerTests.ParserTests.ArrayLiteral" /><Add Test="CompilerTests.CodeGenerator.FinaliseFunctionDefinition" /><Add Test="CompilerTests.TypeChecker.BindingDeclarationConstrainedInteger" /><Add Test="CompilerTests.CodeGenerator.BinaryEquals" /><Add Test="CompilerTests.ParserTests.Constraint" /><Add Test="CompilerTests.TypeChecker.TypeofBinaryDiv" /><Add Test="CompilerTests.TypeConstraints.OrOnLtGt" /><Add Test="CompilerTests.CodeGenerator.BinaryLessThanOrEqual" /><Add Test="CompilerTests.LexerTests.Braces" /><Add Test="CompilerTests.TypeConstraints.Eq" /><Add Test="CompilerTests.CodeGenerator.TypeClass" /><Add Test="CompilerTests.TypeChecker.NonassignableSubtypes" /><Add Test="CompilerTests.TypeChecker.TypeofArrayIndex" /><Add Test="CompilerTests.TypeChecker.For" /><Add Test="CompilerTests.CodeGenerator.FinaliseFor" /><Add Test="CompilerTests.LexerTests.Brackets" /><Add Test="CompilerTests.LexerTests.Assignment" /><Add Test="CompilerTests.TypeChecker.TypeofArray" /><Add Test="CompilerTests.TypeChecker.Program" /><Add Test="CompilerTests.TypeChecker.TypeofArrayIndexIncorrectIndex" /><Add Test="CompilerTests.TypeChecker.ForInvalidEnumerable" /><Add Test="CompilerTests.CodeGenerator.FinalisedTypeClass" /><Add Test="CompilerTests.TypeChecker.NewAssignmentFailure" /><Add Test="CompilerTests.CodeGenerator.BinaryLessThan" /><Add Test="CompilerTests.LexerTests.Operator" /><Add Test="CompilerTests.ParserTests.If" /><Add Test="CompilerTests.CodeGenerator.BinaryNotEquals" /><Add Test="CompilerTests.LexerTests.DecimalPoint" /><Add Test="CompilerTests.ParserTests.ArrayIndex" /><Add Test="CompilerTests.TypeChecker.FunctionCallOverload" /><Add Test="CompilerTests.TypeChecker.TypeofBinaryOpBooleans" /><Add Test="CompilerTests.ParserTests.UnaryOp" /><Add Test="CompilerTests.CodeGenerator.BindingDeclaration" /><Add Test="CompilerTests.ParserTests.While" /><Add Test="CompilerTests.TypeChecker.TypeofString" /><Add Test="CompilerTests.LexerTests.While" /><Add Test="CompilerTests.CodeGenerator.Record" /><Add Test="CompilerTests.ParserTests.ArrayType" /><Add Test="CompilerTests.ParserTests.BinaryOp" /><Add Test="CompilerTests.TypeChecker.TypeofBinaryFloatWithBool" /><Add Test="CompilerTests.TypeConstraints.AndConstraint" /><Add Test="CompilerTests.TypeChecker.ForInvalidBinding" /><Add Test="CompilerTests.TypeConstraints.AndEquals" /><Add Test="CompilerTests.CodeGenerator.BinaryDivision" /><Add Test="CompilerTests.CodeGenerator.FloatConstant" /><Add Test="CompilerTests.TypeChecker.TypeofBinarySub" /><Add Test="CompilerTests.CodeGenerator.NewAssignment" /><Add Test="CompilerTests.TypeChecker.WhileInvalidBlock" /><Add Test="CompilerTests.CodeGenerator.IntegerConstant" /><Add Test="CompilerTests.TypeChecker.AssignableSubTypes" /><Add Test="CompilerTests.TypeChecker.TypeofBinaryOpBooleanFailure" /><Add Test="CompilerTests.TypeChecker.FunctionCallAssignmentFailure" /><Add Test="CompilerTests.CodeGenerator.BoolConstant" /><Add Test="CompilerTests.TypeChecker.FunctionDefOverload" /><Add Test="CompilerTests.CodeGenerator.BinaryGreaterThanOrEqual" /><Add Test="CompilerTests.CodeGenerator.ArrayAssignment" /><Add Test="CompilerTests.TypeChecker.InvalidUnion" /><Add Test="CompilerTests.TypeChecker.BindingDeclarationMultiConstrainedIntegerArray" /><Add Test="CompilerTests.TypeChecker.EqualBaseTypes" /><Add Test="CompilerTests.ParserTests.Assignment" /><Add Test="CompilerTests.ParserTests.Program" /><Add Test="CompilerTests.TypeChecker.BindingDeclarationMultiConstrainedInteger" /><Add Test="CompilerTests.CodeGenerator.BinarySubtraction" /><Add Test="CompilerTests.LexerTests.Name" /><Add Test="CompilerTests.LexerTests.SquareBrackets" /><Add Test="CompilerTests.TypeChecker.TypeofArrayAssignmentIncorrectArray" /><Add Test="CompilerTests.LexerTests.LineSeperator" /><Add Test="CompilerTests.ParserTests.BooleanFalse" /><Add Test="CompilerTests.TypeChecker.BindingDeclarationPlainBool" /><Add Test="CompilerTests.TypeConstraints.Lt" /><Add Test="CompilerTests.ParserTests.NewAssignmentReadonly" /><Add Test="CompilerTests.TypeChecker.TypeofArrayAssignment" /><Add Test="CompilerTests.TypeChecker.ComplexArrayTyping" /><Add Test="CompilerTests.TypeConstraints.SimpleAnd" /><Add Test="CompilerTests.TypeChecker.ForInvalidBlock" /><Add Test="CompilerTests.TypeChecker.FunctionCallAssignment" /><Add Test="CompilerTests.ParserTests.NewAssignmentWritable" /><Add Test="CompilerTests.LexerTests.If" /><Add Test="CompilerTests.ParserTests.Record" /><Add Test="CompilerTests.TypeChecker.BindingDeclarationPlainString" /></Playlist>